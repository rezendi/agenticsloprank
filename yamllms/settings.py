"""
Django settings for YamLLMs.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os, sys
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

IS_HEROKU_APP = "DYNO" in os.environ and not "CI" in os.environ
PRODUCTION = os.environ.get("PRODUCTION", "false") == "true" or IS_HEROKU_APP

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "false") == "true" or not PRODUCTION

TESTING = sys.argv[1:2] == ["test"]

BASE_DOMAIN = "yamllms.ai"
if PRODUCTION:
    ALLOWED_HOSTS = [
        BASE_DOMAIN,
        "www." + BASE_DOMAIN,
        "stage." + BASE_DOMAIN,
    ]
    SECURE_SSL_REDIRECT = True
else:
    ALLOWED_HOSTS = []

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if DEBUG and not SECRET_KEY:
    SECRET_KEY = "debug_yamllms_qwerty"

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760

SESSION_COOKIE_AGE = 604800  # 1 week

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_rq",
    "missions",
    "web",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django_permissions_policy.PermissionsPolicyMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "sesame.backends.ModelBackend",
]

AUTH_USER_MODEL = "missions.User"

ROOT_URLCONF = "yamllms.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "yamllms.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if PRODUCTION:
    if IS_HEROKU_APP:
        DATABASES = {
            "default": dj_database_url.config(
                conn_max_age=600,
                conn_health_checks=True,
                ssl_require=True,
            ),
        }
else:
    # When running locally in development or in CI, a sqlite database file will be used instead
    # to simplify initial setup. Longer term it's recommended to use Postgres locally too.
    DB_HOST = os.environ.get("DB_HOST", "localhost")
    if DB_HOST == "localhost":
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }
    if DB_HOST == "postgres":
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "HOST": "postgres",
                "NAME": "postgres",
                "USER": "postgres",
                "PASSWORD": "pgpassword",
                "PORT": "5432",
            }
        }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# https://whitenoise.readthedocs.io/en/latest/django.html

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
WHITENOISE_KEEP_ONLY_HASHED_FILES = False
STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# HSTS

if PRODUCTION and not DEBUG:
    SECURE_HSTS_SECONDS = 7200  # 2 hours, for now
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


# Redis, caching, queues

REDIS_URL = os.environ.get("REDIS_TLS_URL")
REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
if not REDIS_URL:
    REDIS_URL = os.environ.get("REDIS_URL", "redis://%s:6379/0" % REDIS_HOST)
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", "")

# For local development, we don't need SSL
REDIS_USE_SSL = not DEBUG

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL,
        "CLIENT_CLASS": "django.core.cache.backends.redis.RedisClient",
    }
}

if REDIS_USE_SSL:
    CACHES["default"]["OPTIONS"] = {"ssl_cert_reqs": None}

RQ_QUEUES = {
    "default": {
        "URL": REDIS_URL,
        "PASSWORD": REDIS_PASSWORD,
        "DEFAULT_TIMEOUT": 3000,
    },
}

if REDIS_USE_SSL:
    for queue in RQ_QUEUES.values():
        queue["SSL"] = True
        queue["SSL_CERT_REQS"] = None

# Mailgun

EMAIL_HOST = os.environ.get("MAILGUN_SMTP_SERVER")
EMAIL_PORT = os.environ.get("MAILGUN_SMTP_PORT", "")
EMAIL_HOST_USER = os.environ.get("MAILGUN_SMTP_LOGIN", "")
EMAIL_HOST_PASSWORD = os.environ.get("MAILGUN_SMTP_PASSWORD", "")
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.mailgun.org"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get("MAILGUN_LOCAL_ADDRESS")
    EMAIL_HOST_PASSWORD = os.environ.get("MAILGUN_LOCAL_PASSWORD")


# Sesame

SESAME_MAX_AGE = 60 * 10  # 10 minutes
LOGIN_REDIRECT_URL = "/login"


# Field encryption

# we never actually use the default value, but need it to be set to something
FIELD_ENCRYPTION_KEY = os.environ.get(
    "FIELD_ENCRYPTION_KEY", "lLNK99hBICN3A5a355daSKv7wtZmCr-Nd_Di0LJahsk="
)


# Sentry

import sentry_sdk

if not DEBUG:
    sentry_sdk.init(
        dsn=os.environ.get("SENTRY_URL"),
        traces_sample_rate=0.1,
        profiles_sample_rate=0.1,
        send_default_pii=True,
    )


# CORS

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_HTTPONLY = True
CORS_ALLOWED_ORIGINS = [
    "https://%s" % BASE_DOMAIN,
    "https://www.%s" % BASE_DOMAIN,
    "https://stage.%s" % BASE_DOMAIN,
]
if DEBUG:
    CORS_ALLOWED_ORIGINS += ["http://localhost:8000"]
WHITENOISE_ALLOW_ALL_ORIGINS = False

# Permissions policy

PERMISSIONS_POLICY = {
    "accelerometer": [],
    "ambient-light-sensor": [],
    "autoplay": [],
    "camera": [],
    "display-capture": [],
    "document-domain": [],
    "encrypted-media": [],
    "fullscreen": [],
    "geolocation": [],
    "gyroscope": [],
    "interest-cohort": [],
    "magnetometer": [],
    "microphone": [],
    "midi": [],
    "payment": [],
    "usb": [],
}

# Our own API, very very basic
API_KEYS = ["dai_41_is_all_you_need"]

# Email address to send notifications to
NOTIFICATION_EMAIL = os.environ.get("NOTIFICATION_EMAIL", "ops@%s" % BASE_DOMAIN)
REPLY_TO_EMAIL = os.environ.get("REPLY_TO_EMAIL", "support@%s" % BASE_DOMAIN)
DEFAULT_FROM_EMAIL = os.environ.get(
    "DEFAULT_FROM_EMAIL", "YamLLMs <do-not-reply@mg.%s>" % BASE_DOMAIN
)

# Prompts

GITHUB_PROMPTS_REPO = os.environ.get("GITHUB_PROMPTS_REPO", "rezendi/yamllms-prompts")

# Use Azure OpenAI, just hard-code for now

USE_AZURE_OPENAI = os.environ.get("USE_AZURE_OPENAI", "false") == "true"

# Stripe and dj-stripe

STRIPE_LIVE_MODE = False
STRIPE_PRICING_TABLE_ID = os.environ.get("STRIPE_PRICING_TABLE_ID")
STRIPE_PUBLIC_KEY = (
    os.environ.get("STRIPE_TEST_PUBLIC_KEY")
    if DEBUG
    else os.environ.get("STRIPE_PUBLIC_KEY")
)
STRIPE_SECRET_KEY = (
    os.environ.get("STRIPE_TEST_SECRET_KEY")
    if DEBUG
    else os.environ.get("STRIPE_SECRET_KEY")
)

STRIPE_BILLING_PORTAL_BASE_URL = (
    os.environ.get("STRIPE_TEST_BILLING_PORTAL_BASE_URL")
    if DEBUG
    else os.environ.get("STRIPE_BILLING_PORTAL_BASE_URL")
)

# Define log level based on DEBUG setting
LOG_LEVEL = os.environ.get("DEBUG_LEVEL", "WARNING")

TASK_CREATION_DELAY = 1.0  # seconds between tasks

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "web": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
    },
}
